package com.example.sudokuchecker


fun generateBoard(boardNumber: Int): List<List<String>> {
    return when (boardNumber) {
        1 ->  listOf(
            listOf('1', '2', '3', '4', '5', '6', '7', '8', '9'),
            listOf('4', '5', '6', '7', '8', '9', '1', '2', '3'),
            listOf('7', '8', '9', '1', '2', '3', '4', '5', '6'),
            listOf('2', '3', '4', '5', '6', '7', '8', '9', '1'),
            listOf('5', '6', '7', '8', '9', '1', '2', '3', '4'),
            listOf('8', '9', '1', '2', '3', '4', '5', '6', '7'),
            listOf('3', '4', '5', '6', '7', '8', '9', '1', '2'),
            listOf('6', '7', '8', '9', '1', '2', '3', '4', '5'),
            listOf('9', '1', '2', '3', '4', '5', '6', '7', '8')
        ).map { row -> row.map { it.toString() } }

        2 -> listOf(
            listOf('1','2','3','4','5','6','7','8','9'),
            listOf('4','5','6','7','8','9','1','2','3'),
            listOf('7','-','9','1','2','3','4','5','6'),
            listOf('2','3','4','5','6','7','8','9','1'),
            listOf('5','6','7','8','9','-','2','3','4'),
            listOf('-','9','1','2','-','4','5','-','7'),
            listOf('3','4','5','6','7','8','9','1','2'),
            listOf('-','7','8','9','1','2','3','4','5'),
            listOf('9','1','2','3','4','5','6','7','8')
        ).map { it.map { c -> c.toString() } }
        3 -> listOf(
            listOf('1','2','3','4','5','6','7','8','9'),
            listOf('4','5','6','7','8','9','1','2','3'),
            listOf('7','8','9','1','2','3','4','5','6'),
            listOf('2','3','4','5','6','7','8','9','1'),
            listOf('5','6','7','8','9','1','2','3','4'),
            listOf('8','9','1','2','3','4','5','6','7'),
            listOf('3','4','5','6','7','8','9','1','2'),
            listOf('6','7','8','9','1','2','3','4','5'),
            listOf('9','1','2','3','4','5','6','7','9') // col error
        ).map { it.map { c -> c.toString() } }


        4 -> listOf(
            listOf('1','2','3','4','5','6','7','8','9'),
            listOf('4','5','6','7','8','5','1','2','3'), // row error
            listOf('7','8','9','1','2','3','4','5','6'),
            listOf('2','3','4','8','6','7','8','9','1'),
            listOf('5','6','7','8','9','1','2','3','4'),
            listOf('8','9','1','2','3','4','5','6','7'),
            listOf('3','4','5','6','7','8','9','1','2'),
            listOf('6','7','8','9','1','2','3','4','5'),
            listOf('9','1','2','3','4','5','6','7','9')
        ).map { it.map { c -> c.toString() } }

        5 -> listOf(
            listOf('1','2','3','4','5','6','7','8','9'),
            listOf('4','5','6','7','8','9','1','2','3'),
            listOf('7','8','9','1','2','3','4','5','6'),
            listOf('2','3','7','5','6','7','8','9','1'), // grid error
            listOf('6','6','7','8','9','1','2','3','4'),
            listOf('8','9','1','2','3','4','5','6','7'),
            listOf('3','4','5','6','7','8','9','1','2'),
            listOf('6','7','8','9','1','2','3','4','5'),
            listOf('9','1','2','3','4','4','6','7','8')
        ).map { it.map { c -> c.toString() } }

        6 -> listOf(
            listOf('1','2','3','4','-','-','7','8','9'),
            listOf('4','-','-','7','-','9','1','2','3'),
            listOf('-','8','-','-','-','3','4','5','6'),
            listOf('2','2','-','5','6','7','8','9','1'),
            listOf('5','6','7','8','-','1','2','3','-'),
            listOf('8','-','1','-','3','4','5','-','7'),
            listOf('-','-','5','6','7','8','-','3','2'),
            listOf('6','7','8','9','-','2','3','4','5'),
            listOf('9','1','2','-','-','5','6','7','8') // col error
        ).map { it.map { c -> c.toString() } }

        7 -> listOf(
            listOf('1','2','3','4','5','6','7','8','9'),
            listOf('4','5','6','7','8','9','1','2','3'),
            listOf('7','8','9','1','2','3','4','5','6'),
            listOf('2','3','7','5','6','7','8','9','1'), // grid & row
            listOf('6','6','7','8','9','1','2','3','4'), // col
            listOf('8','9','1','2','3','4','5','6','7'),
            listOf('3','4','5','6','7','8','9','1','2'),
            listOf('6','7','8','9','1','2','3','4','5'),
            listOf('9','1','2','3','4','4','6','7','9') // multiple errors
        ).map { it.map { c -> c.toString() } }

        8 -> listOf(
            listOf('-','-','-','-','-','-','-','-','-'),
            listOf('-','-','-','-','-','-','-','-','-'),
            listOf('-','-','-','-','-','-','-','-','-'),
            listOf('-','-','-','-','-','-','-','-','-'),
            listOf('-','-','-','-','-','-','-','-','-'),
            listOf('-','-','-','-','-','-','-','-','-'),
            listOf('-','-','-','-','-','-','-','-','-'),
            listOf('-','-','-','-','-','-','-','-','-'),
            listOf('-','-','-','-','-','-','-','-','-')
        ).map { it.map { c -> c.toString() } }

        9 -> listOf(
            listOf('1','-','-','-','6','7','8','9','-'),
            listOf('7','8','9','1','2','3','4','5','6'),
            listOf('2','3','4','5','6','7','8','9','1'),
            listOf('5','6','7','8','9','1','2','3','4'),
            listOf('5','9','1','2','3','4','5','6','7'),
            listOf('3','4','5','6','7','8','9','1','2'),
            listOf('6','7','8','9','1','2','3','4','5'),
            listOf('9','1','2','3','4','5','6','7','8')
        ).map { it.map { c -> c.toString() } }

        10 -> listOf(
            listOf('5','3','-','7','-','-','-','-','-'),
            listOf('6','-','-','1','9','5','-','-','-'),
            listOf('-','9','8','-','-','-','6','-','-'),
            listOf('8','-','-','-','6','-','-','-','3'),
            listOf('4','-','-','8','-','3','-','-','1'),
            listOf('7','-','-','-','2','-','-','-','6'),
            listOf('-','6','-','-','-','-','0','8','-'),
            listOf('-','-','-','4','1','9','-','-','5'),
            listOf('-','-','-','-','8','-','-','7','-')
        ).map { it.map { c -> c.toString() } }

        11 -> listOf(
            listOf('5','3','#','7','-','-','-','-','-'),
            listOf('6','-','-','1','9','5','-','@','-'),
            listOf('-','9','8','-','-','-','!','-','-'),
            listOf('8','-','-','-','6','-','-','-','3'),
            listOf('4','-','-','8','-','3','-','-','1'),
            listOf('7','-','-','-','2','-','-','-','6'),
            listOf('-','6','-','-','-','-','-','8','-'),
            listOf('-','-','-','4','1','9','-','-','5'),
            listOf('-','-','-','-','8','-','-','7','-')
        ).map { it.map { c -> c.toString() } }

        12 -> listOf(
            listOf('5','3','A','7','-','-','-','-','-'),
            listOf('6','-','-','1','9','B','-','-','-'),
            listOf('-','9','8','-','-','-','6','-','-'),
            listOf('8','-','-','-','6','-','-','-','3'),
            listOf('4','-','-','C','-','3','-','-','1'),
            listOf('7','-','-','-','2','-','-','-','6'),
            listOf('-','6','-','-','-','-','-','8','-'),
            listOf('-','-','-','4','1','9','-','-','5'),
            listOf('-','-','-','-','8','-','-','7','-')
        ).map { it.map { c -> c.toString() } }

        13 -> listOf(
            listOf('5','3','-','-','7','-','-','-','-'),
            listOf('6','-','-','1','9','5','-','-','-'),
            listOf('-','9','8','-','-','-','6','-','-'),
            listOf('8','-','-','-','6','-','-','-','3'),
            listOf('4','-','-','8','-','3','-','-','1'),
            listOf('7','-','-','-','2','-','-','-','6'),
            listOf('-','6','-','-','-','-','-','8','-'),
            listOf('-','-','-','4','1','9','-','-','5')
        ).map { it.map { c -> c.toString() } }
        else -> throw IllegalArgumentException("Invalid board number")
    }
}